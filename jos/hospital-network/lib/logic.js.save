/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';
/**
 * Write your transction processor functions here
 */


/**
 * Handle a transaction that returns a string.
 * @param {org.hospital.record.CheckIntegrity} transaction
 * @transaction
 */
async function CheckIntegrity(transaction) {
//    var diagnosaPrimer = [];
    var dataMedis = [];
    return getAssetRegistry('org.hospital.record.DataMedis').then(function (assetRegistry) {
        return assetRegistry.getAll().then(function(resourceCollection) {
                resourceCollection.forEach(function (resource) {
//                    diagnosaPrimer.push(resource.diagnosaPrimer);
		    dataMedis.push(resource.idRekMedis);
                    dataMedis.push(resource.noRekMedis);
                    dataMedis.push(resource.pasien);
                    dataMedis.push(resource.dokter);
                    dataMedis.push(resource.tglMasuk);
                    dataMedis.push(resource.tglKeluar);
                    dataMedis.push(resource.alasanMasuk);
                    dataMedis.push(resource.rujukan);
                    dataMedis.push(resource.anamnesis);
                    dataMedis.push(resource.pemeriksaanFisik);
                    dataMedis.push(resource.riwayatAlergi);
                    dataMedis.push(resource.diagnosaPrimer);
                    dataMedis.push(resource.diagnosaSekunder);
                    dataMedis.push(resource.terapiDiRs);
                    dataMedis.push(resource.tindakan);
                    dataMedis.push(resource.prognosaPenyakit);
                    dataMedis.push(resource.alasanPulang);
                    dataMedis.push(resource.kondisiSaatPulang);
                    dataMedis.push(resource.rencanaTindakLanjut);


                    var factory = getFactory();
                    var newEvent = factory.newEvent('org.hospital.record', 'DataMedisSent');
//                    newEvent.diagnosaPrimer = diagnosaPrimer;
                    newEvent.dataMedis = dataMedis;
                    emit(newEvent);
                });

        }).catch(function(error){
            console.log(error);
        });
    });
}


/**
 * Handle a transaction that returns a string.
 * @param {org.hospital.record.UpdateDataMedis} tx
 * @transaction
 */
async function UpdateDataMedis(tx) {
    const oldNoRekMedis = tx.sampData.noRekMedis;
    const oldTglMasuk = tx.sampData.tglMasuk;
    const oldTglKeluar = tx.sampData.tglKeluar;
    const oldAlasanMasuk = tx.sampData.alasanMasuk;
    const oldRujukan = tx.sampData.rujukan;
    const oldAnamnesis = tx.sampData.anamnesis;
    const oldPemeriksaanFisik = tx.sampData.pemeriksaanFisik;
    const oldRiwayatAlergi = tx.sampData.riwayatAlergi;
    const oldDiagnosaPrimer = tx.sampData.diagnosaPrimer;
    const oldDiagnosaSekunder = tx.sampData.diagnosaSekunder;
    const oldTerapiDiRs = tx.sampData.terapiDiRs;
    const oldTindakan = tx.sampData.tindakan;
    const oldPrognosaPenyakit = tx.sampData.prognosaPenyakit;
    const oldAlasanPulang = tx.sampData.alasanPulang;
    const oldKondisiSaatPulang = tx.sampData.kondisiSaatPulang;
    const oldRencanaTindakLanjut = tx.sampData.rencanaTindakLanjut;
    tx.sampData.noRekMedis = tx.newNoRekMedis;
    tx.sampData.pasien = tx.newPasien;
    tx.sampData.dokter = tx.newDokter;
    tx.sampData.tglMasuk = tx.newTglMasuk;
    tx.sampData.tglKeluar = tx.newTglKeluar;
    tx.sampData.alasanMasuk = tx.newAlasanMasuk;
    tx.sampData.rujukan = tx.newRujukan;
    tx.sampData.anamnesis = tx.newAnamnesis;
    tx.sampData.pemeriksaanFisik = tx.newPemeriksaanFisik;
    tx.sampData.riwayatAlergi = tx.newRiwayatAlergi;
    tx.sampData.diagnosaPrimer = tx.newDiagnosaPrimer;
    tx.sampData.diagnosaSekunder = tx.newDiagnosaSekunder;
    tx.sampData.terapiDiRs = tx.newTerapiDiRs;
    tx.sampData.tindakan = tx.newTindakan;
    tx.sampData.prognosaPenyakit = tx.newPrognosaPenyakit;
    tx.sampData.alasanPulang = tx.newAlasanPulang;
    tx.sampData.kondisiSaatPulang = tx.newKondisiSaatPulang;
    tx.sampData.rencanaTindakLanjut = tx.newRencanaTindakLanjut;

    const assetRegistry = await getAssetRegistry('org.hospital.record.DataMedis');
    await assetRegistry.update(tx.sampData);

    let event = getFactory().newEvent('org.hospital.record', 'MedisData');
    event.sampData = tx.sampData;
    event.oldNoRekMedis = oldNoRekMedis;
    event.oldTglMasuk = oldTglMasuk;
    event.oldTglKeluar = oldTglKeluar;
    event.oldAlasanMasuk = oldAlasanMasuk;
    event.oldRujukan = oldRujukan;
    event.oldAnamnesis = oldAnamnesis;
    event.oldPemeriksaanFisik = oldPemeriksaanFisik;
    event.oldRiwayatAlergi = oldRiwayatAlergi;
    event.oldDiagnosaPrimer = oldDiagnosaPrimer;
    event.oldDiagnosaSekunder = oldDiagnosaSekunder;
    event.oldTerapiDiRs = oldTerapiDiRs;
    event.oldTindakan = oldTindakan;
    event.oldPrognosaPenyakit = oldPrognosaPenyakit;
    event.oldAlasanPulang = oldAlasanPulang;
    event.oldKondisiSaatPulang = oldKondisiSaatPulang;
    event.oldRencanaTindakLanjut = oldRencanaTindakLanjut;

    event.newNoRekMedis = tx.newNoRekMedis;
    event.newTglMasuk = tx.newTglMasuk;
    event.newTglKeluar = tx.newTglKeluar;
    event.newAlasanMasuk = tx.newAlasanMasuk;
    event.newRujukan = tx.newRujukan;
    event.newAnamnesis = tx.newAnamnesis;
    event.newPemeriksaanFisik = tx.newPemeriksaanFisik;
    event.newRiwayatAlergi = tx.newRiwayatAlergi;
    event.newDiagnosaPrimer = tx.newDiagnosaPrimer;
    event.newDiagnosaSekunder = tx.newDiagnosaSekunder;
    event.newTerapiDiRs = tx.newTerapiDiRs;
    event.newTindakan = tx.newTindakan;
    event.newPrognosaPenyakit = tx.newPrognosaPenyakit;
    event.newAlasanPulang = tx.newAlasanPulang;
    event.newKondisiSaatPulang = tx.newKondisiSaatPulang;
    event.newRencanaTindakLanjut = tx.newRencanaTindakLanjut;

    emit(event);

    //return getAssetRegistry('org.hospital.record.DataMedis').then(function (assetRegistry) {
    //    return assetRegistry.update(tx.sampData);
    //})
    //.catch(function (error) {
    //    console.error(error);
    //});

}

/**
 * Handle a transaction that returns a string.
 * @param {org.hospital.record.TambahDataMedis} transaction
 * @transaction
 */
async function TambahDataMedis(transaction) {
  const factory = getFactory();
  let newAsset = factory.newResource('org.hospital.record', 'DataMedis', transaction.idRekMedis);
  newAsset.idRekMedis = transaction.idRekMedis;
  newAsset.noRekMedis = transaction.noRekMedis;
  newAsset.pasien = transaction.pasien;
  newAsset.dokter = transaction.dokter;
  newAsset.tglMasuk = transaction.tglMasuk;
  newAsset.tglKeluar = transaction.tglKeluar;
  newAsset.alasanMasuk = transaction.alasanMasuk;
  newAsset.rujukan = transaction.rujukan;
  newAsset.anamnesis = transaction.anamnesis;
  newAsset.pemeriksaanFisik = transaction.pemeriksaanFisik;
  newAsset.riwayatAlergi = transaction.riwayatAlergi;
  newAsset.diagnosaPrimer = transaction.diagnosaPrimer;
  newAsset.diagnosaSekunder = transaction.diagnosaSekunder;
  newAsset.terapiDiRs = transaction.terapiDiRs;
  newAsset.tindakan = transaction.tindakan;
  newAsset.prognosaPenyakit = transaction.prognosaPenyakit;
  newAsset.alasanPulang = transaction.alasanPulang;
  newAsset.kondisiSaatPulang = transaction.kondisiSaatPulang;
  newAsset.rencanaTindakLanjut = transaction.rencanaTindakLanjut;

  return getAssetRegistry('org.hospital.record.DataMedis').then(function (assetRegistry) {
    return assetRegistry.add(newAsset);

  })
  .catch(function (error) {
    console.error(error);
  });  
}
